commit c6d02c569a59df90ddddf06201d3ae55531a2bd7
Author: Isuru Fernando <isuruf@gmail.com>
Date:   Fri Sep 2 14:06:45 2022 -0500

    Support gettimeofday on MSVC

diff --git a/source/libnormaliz/general.cpp b/source/libnormaliz/general.cpp
index d70b8c03..7cf47579 100644
--- a/source/libnormaliz/general.cpp
+++ b/source/libnormaliz/general.cpp
@@ -23,9 +23,43 @@
 
 #include <cstdlib>
 #include <csignal>
-#include <sys/time.h>
 #include "libnormaliz/general.h"
 
+#ifndef _MSC_VER
+#include <sys/time.h>
+#else
+#define WIN32_LEAN_AND_MEAN
+#include <Windows.h>
+#include <stdint.h> // portable: uint64_t   MSVC: __int64
+
+// MSVC defines this in winsock2.h!?
+typedef struct timeval {
+    long tv_sec;
+    long tv_usec;
+} timeval;
+
+int gettimeofday(struct timeval * tp, struct timezone * tzp)
+{
+    // Note: some broken versions only have 8 trailing zero's, the correct epoch has 9 trailing zero's
+    // This magic number is the number of 100 nanosecond intervals since January 1, 1601 (UTC)
+    // until 00:00:00 January 1, 1970
+    static const uint64_t EPOCH = ((uint64_t) 116444736000000000ULL);
+
+    SYSTEMTIME  system_time;
+    FILETIME    file_time;
+    uint64_t    time;
+
+    GetSystemTime( &system_time );
+    SystemTimeToFileTime( &system_time, &file_time );
+    time =  ((uint64_t)file_time.dwLowDateTime )      ;
+    time += ((uint64_t)file_time.dwHighDateTime) << 32;
+
+    tp->tv_sec  = (long) ((time - EPOCH) / 10000000L);
+    tp->tv_usec = (long) (system_time.wMilliseconds * 1000);
+    return 0;
+}
+#endif
+
 namespace libnormaliz {
 
 bool verbose = false;
